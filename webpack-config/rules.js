import { join } from 'path';

import MiniCssExtractPlugin from 'mini-css-extract-plugin';

import { isProd, rootDir } from './utils';

/**
 * Resource list for sass-resource-loader
 * @see https://github.com/shakacode/sass-resources-loader
 * @example
 *  [
 *      path.resolve(__dirname, '../src/foo.scss'),
 *  ]
 */
const sassResourceItems = [];

/**
 * @see https://webpack.js.org/guides/typescript/#loader
 */
export const typescriptRule = {
  test: /\.tsx?$/,
  loader: 'ts-loader',
  exclude: /node_modules/,
  options: {
    // disable type checker - we will use it in fork plugin
    transpileOnly: true,
  },
};

/**
 * @see https://webpack.js.org/loaders/babel-loader
 */
export const javascriptRule = {
  test: /\.(js|jsx)$/,
  use: [
    {
      loader: 'babel-loader',
      options: {
        configFile: join(rootDir, '/.babelrc.js'),
      },
    },
  ],
  exclude: /node_modules/,
};

/**
 * @see https://webpack.js.org/loaders/html-loader
 */
export const htmlRule = {
  test: /\.(html)$/,
  use: {
    loader: 'html-loader',
  },
};

/**
 * @see https://webpack.js.org/guides/asset-modules/
 */
export const imagesRule = {
  test: /\.(?:svg|ico|gif|png|jpg|jpeg)$/i,
  type: 'asset/resource',
};

/**
 * @see https://webpack.js.org/guides/asset-modules/
 */
export const fontsRule = {
  test: /\.(woff(2)?|eot|ttf|otf|)$/i,
  type: 'asset/inline',
};

/***
 * Using MiniCssExtractPlugin in production or style-loader in development
 * @see https://webpack.js.org/plugins/mini-css-extract-plugin/#root
 * @see https://webpack.js.org/loaders/style-loader/#root
 */
const miniCssExtractLoader = isProd
  ? {
      loader: MiniCssExtractPlugin.loader,
      options: {
        esModule: false,
      },
    }
  : {
      loader: 'style-loader',
      options: {
        esModule: false,
      },
    };

const postCssLoader = {
  loader: 'postcss-loader',
  options: {
    postcssOptions: {
      plugins: ['autoprefixer', isProd ? 'cssnano' : null],
    },
    sourceMap: true,
  },
};

/**
 * @see https://webpack.js.org/loaders/sass-loader/#problems-with-url
 */
const resolveUrlLoader = {
  loader: 'resolve-url-loader',
  options: {
    sourceMap: true,
  },
};

const typingsCssModulesLoader = {
  loader: '@teamsupercell/typings-for-css-modules-loader',
  options: {
    banner: '// autogenerated by typings-for-css-modules-loader. \n// Please do not change this file!',
    formatter: 'prettier',
  },
};

const cssModulesSupportLoaderItems = [
  miniCssExtractLoader,
  typingsCssModulesLoader,
  {
    loader: 'css-loader',
    options: {
      esModule: false,
      modules: {
        exportLocalsConvention: 'camelCaseOnly',
        localIdentName: '[local]__[contenthash:base64:5]',
      },
    },
  },
];

/**
 * @see https://webpack.js.org/loaders/less-loader/#root
 */
export const lessLoader = {
  loader: 'less-loader',
  options: {
    sourceMap: true,
    lessOptions: {
      javascriptEnabled: true,
    },
  },
};

const cssLoaderItems = [
  miniCssExtractLoader,
  {
    loader: 'css-loader',
  },
];

/**
 * CSS Rule
 */
export const cssRule = {
  test: /\.css$/,
  use: [
    miniCssExtractLoader,
    {
      loader: 'css-loader',
    },
    postCssLoader,
  ],
};

/**
 * LESS Rule
 */
export const lessRules = [
  {
    test: /\.module.less$/,
    use: [...cssModulesSupportLoaderItems, postCssLoader, resolveUrlLoader, lessLoader],
  },
  {
    test: /\.less$/,
    exclude: /\.module.less$/,
    use: [...cssLoaderItems, postCssLoader, resolveUrlLoader, lessLoader],
  },
];

/**
 * SASS Rule
 */
export const sassRules = [
  {
    test: /\.module\.s([ca])ss$/,
    use: [
      ...cssModulesSupportLoaderItems,
      postCssLoader,
      resolveUrlLoader,
      {
        loader: 'sass-loader',
        options: {
          sourceMap: true,
          implementation: require('sass'), // Prefer `dart-sassRules`
        },
      },
    ],
  },
  {
    test: /\.s([ca])ss$/,
    exclude: /\.module.scss$/,
    use: [
      ...cssLoaderItems,
      postCssLoader,
      resolveUrlLoader,
      {
        loader: 'sass-loader',
        options: {
          sourceMap: true,
          implementation: require('sass'), // Prefer `dart-sassRules`
        },
      },
    ],
  },
];

/**
 * SVG Rule
 */
export const svgRule = [
  /**
   * Using @svgr/webpack for handling svg files in react components
   * @see https://react-svgr.com/docs/webpack/
   */
  {
    test: /\.svg(\?v=\d+\.\d+\.\d+)?$/,
    issuer: /\.[jt]sx$/,
    use: [
      {
        loader: 'babel-loader',
        options: {
          configFile: join(rootDir, '/.babelrc.js'),
        },
      },
      {
        loader: '@svgr/webpack',
        options: {
          babel: false,
          icon: true,
        },
      },
    ],
  },

  /**
   * Using file-loader for handling svg files
   * @see https://webpack.js.org/guides/asset-modules/
   */
  {
    test: /\.svg(\?v=\d+\.\d+\.\d+)?$/,
    issuer: { not: [/\.[jt]sx$/] },
    type: 'asset/inline',
  },
];
